package com.mycompany.eps;
import javax.swing.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.time.LocalTime;
import java.time.format.DateTimeFormatter;

public class EPS extends javax.swing.JFrame {
        private JLabel labelTiempo;  // Etiqueta para el cronómetro
        private Timer timer;  // Timer para actualizar el tiempo
        private LocalTime tiempoActual;
    // Constructor
    public EPS() {
        initComponents();
        iniciarCronometro();  // Llamamos al cronómetro
    }

    // Método para inicializar los componentes
    private void initComponents() {
        
        // Crear los elementos
        JLabel labelCedula = new JLabel("Ingrese Cédula:");
        JTextField fieldCedula = new JTextField(15);

        JLabel labelCategoria = new JLabel("Seleccione Categoría:");
        JComboBox<String> comboCategoria = new JComboBox<>(new String[]{"Menor de 10 años", "Joven", "Adulto Mayor","Persona con discapacidad"});

        JLabel labelServicio = new JLabel("Seleccione Servicio:");
        JComboBox<String> comboServicio = new JComboBox<>(new String[]{"Consulta médica General", "Consulta médica Especializada", "Prueba de laboratorio","imagenes (diagnosticos)"});

        JButton btnProcesar = new JButton("Procesar Atención");

        JTextArea areaResultado = new JTextArea(25, 40);
        areaResultado.setEditable(false);
        labelTiempo = new JLabel("Hora Actual: 00:00:00");  // Etiqueta para mostrar el cronómetro
        // Configurar el layout
        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Simulación Atención EPS");

        // Layout usando GroupLayout
        GroupLayout layout = new GroupLayout(getContentPane());
        getContentPane().setLayout(layout);

        // Configuramos el layout en forma horizontal y vertical
        layout.setHorizontalGroup(
            layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                    .addComponent(labelCedula)
                    .addComponent(labelCategoria)
                    .addComponent(labelServicio)
                    .addComponent(btnProcesar)
                    .addComponent(labelTiempo) 
                )
                .addGroup(layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                    .addComponent(fieldCedula)
                    .addComponent(comboCategoria)
                    .addComponent(comboServicio)
                    .addComponent(areaResultado)
                )
        );

        layout.setVerticalGroup(
            layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(GroupLayout.Alignment.BASELINE)
                    .addComponent(labelCedula)
                    .addComponent(fieldCedula)
                )
                .addGroup(layout.createParallelGroup(GroupLayout.Alignment.BASELINE)
                    .addComponent(labelCategoria)
                    .addComponent(comboCategoria)
                )
                .addGroup(layout.createParallelGroup(GroupLayout.Alignment.BASELINE)
                    .addComponent(labelServicio)
                    .addComponent(comboServicio)
                )
                .addComponent(btnProcesar)
                .addComponent(areaResultado)
        );

        // Acción del botón "Procesar"
        btnProcesar.addActionListener(e -> {
            String cedula = fieldCedula.getText();
            String categoria = comboCategoria.getSelectedItem().toString();
            String servicio = comboServicio.getSelectedItem().toString();
            String tiempoConsulta = tiempoActual.format(DateTimeFormatter.ofPattern("HH:mm:ss"));
            // Mostrar el resultado en el JTextArea
            areaResultado.setText("Cédula: " + cedula + "\n" +
                                  "Categoría: " + categoria + "\n" +
                                  "Servicio Solicitado: " + servicio + "\n" +
                                   "Hora de la Consulta: " + tiempoConsulta);
        });

        // Ajustar el tamaño y mostrar la ventana
        pack();
        setVisible(true);
    }
        // Método para iniciar el cronómetro
    private void iniciarCronometro() {
        timer = new Timer(1000, new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                // Actualizamos el tiempo actual cada segundo
                tiempoActual = LocalTime.now();
                labelTiempo.setText("Hora Actual: " + tiempoActual.format(DateTimeFormatter.ofPattern("HH:mm:ss")));
            }
        });
        timer.start();  // Iniciar el Timer
    }

    // Método principal para correr la aplicación
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(() -> new EPS().setVisible(true));
    }
}
